 -- Example with the rudimentary PH2 code --

 * This gives examples of para-H2 with the isotropic Silvera-Goldman 
   pair potential, as tested against Glenn J. Martyna, Adam Hughes and 
   Mark E. Tuckerman, J. Chem. Phys. 110, 3275, (1999)
   and Thomas F. Miller and David E. Manolopoulos,
   J. Chem. Phys. 122, 184503, (2005). 
   
** Glenn J. Martyna, et. al. is the basis for the tests in the
   directories MHT-*.

 * State points: (N, P, T) = (172, 0 MPa, 14/17/20/25 K)

** Thomas F. Miller et. al. is the basis for the tests in the
   directories nvt and RPMD

 * State point: (N, V, T) = (108, 31.7 cm**3 mol**(-1), 25 K)


** To run, first compile the driver code in drivers/. 
   This should be as simple as: 

$ make

 * Next, source the env.sh file in the i-pi root.

$ source i-pi-root/env.sh


** Run the examples automatically:
 
 * These can be run automatically using the Makefile provided. The make 
   targets are self-explanatory. To run the NVT example, for instance, just type:

$ make nvt

 * To clean up output files:

$ make clean


** Run the examples manually:

Before continuing, source the env.sh file in the i-pi root directory

$ source <i-pi-root>/env.sh


** The MHT directories:

 * Go back to the example directory and run

$ i-pi input_equilibrated.xml
 
   the wrapper will start and sit waiting on the UDS /tmp/ipi.
 
 * Open a separate terminal and run the SG driver code. Each of the tests
   runs using a different server address, which are related to their
   directory names. For example, the 25K problem is run using:
 
$ i-pi-driver -u -h T_25K -m sg -o 15.0

   You can run multiple instances of the code; evaluation of the forces is 
   inexpensive relative to the communication and nuclear dynamics overhead, 
   so that parallel scaling won't be appreciable.

 * If your system does not support Unix domain sockets, just set in 
   input_equilibrated.xml
   <socket mode="inet"> <port> port_no </port>

  then run the driver as:

$ i-pi-driver -h T_25K -m sg -o 15.0 -p port_no


** The nvt directory:

 * Go back to the example directory and run

$ i-pi input.xml
 
   the wrapper will start and sit waiting on the UDS /tmp/ipi
 
 * Open a separate terminal and run the SG driver code 
 
$ i-pi-driver -u -h ph2_nvt -m sg -o 15.0

   You can run multiple instances of the code; it is so fast that parallel 
   scaling won't be appreciable.

 * If your system does not support Unix domain sockets, just set in input.xml
   <socket mode="inet"> <port> port_no </port>

  then run the driver as:

$ i-pi-driver -h ph2_nvt -m sg -o 15.0 -p port_no


** The RPMD directory:

  * The RPMD example requires one to create several run_** directories, in 
    which a number of subsequent NVE runs are executed, with velocities being
    randomized at the beginning of each run. Look at the RPMD/run_%/test16.out to
    get an idea of how these runs should be performed.

  * The RPMD directory also contains some post-processing code, that can be compiled by

$ make scripts
 
    and executed -- after the runs have been performed -- by

$ make postproc
